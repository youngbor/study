
设计模式7大原则
	1. 开闭原则（Open Close Principle）
		对扩展开放，对修改关闭
	2. 单一职责原则
		每个类应该实现单一的职责
	3. 里氏替换原则（Liskov Substitution Principle）
		任何基类可以出现的地方，子类一定可以出现
	4. 依赖倒转原则（Dependence Inversion Principle）
		面向接口编程，依赖于抽象而不依赖于具体
	5. 接口隔离原则（Interface Segregation PRinciple）
		每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分
	6. 迪米特法则（Demeter Principle）
		一个类对自己依赖的类知道的越少越好
	7. 合成复用原则（Composite Reuse Principle）
		原则是尽量首先使用合成/聚合的方式，而不是使用继承

1. 单例模式（Singleton）
	保证在一个JVM中，一个对象只有一个实例存在。（构造方法私有，防止被实例化）
	1. 饿汉式
		public class Singleton{
			private static Singleton Instance = new Singleton();
			private Singleton(){} // 私有化构造方法
			public static Singleton getInstance(){
				return Singleton.Instance
			}
		}
	2. 懒汉式
	3. 静态内部类
		public class Singleton{
			private Singleton(){} // 私有化构造方法
			private static class SingletonFactory{
				private static Singleton Instance = new Singleton();
			}
			
			public static Singleton getInstance(){
				return SingletonFactory.Instance;
			}
		}
	4. 枚举enum

2. 工厂模式（Factory）
	工厂方法	--> 对应产品
	抽象工厂	--> 对应产品组

	比如说工厂可以生产鼠标和键盘。那么抽象工厂的实现类（它的某个具体子类）的对象都可以生产鼠标和键盘，但可能工厂A生产的是罗技的键盘和鼠标，工厂B是微软的。

	这样A和B就是工厂，对应于抽象工厂；
	每个工厂生产的鼠标和键盘就是产品，对应于工厂方法；

	用了工厂方法模式，你替换生成键盘的工厂方法，就可以把键盘从罗技换到微软。但是用了抽象工厂模式，你只要换家工厂，就可以同时替换鼠标和键盘一套。如果你要的产品有几十个，当然用抽象工厂模式一次替换全部最方便（这个工厂会替你用相应的工厂方法）

	所以说抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线

3. 观察者模式
	当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化。

4. 责任链模式
	在隐瞒客户端的情况下，对系统进行动态的调整。
	例如Filter，FilterChain
	request请求
	response返回
	控制 --> 按照顺序对request请求进行解析，且返回时按照相反的顺序对response返回的信息进行处理。

5. 代理模式（Proxy）
	静态代理
	动态代理
		jdk动态代理：代理的类必须实现接口 
			知识点：（asm、instrument）
		cglib动态代理：将被代理的类变成代理类的父类，被代理的类不能是final。

	代理模式的应用场景：
	如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：
	1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。
	2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。
	使用代理模式，可以将功能划分的更加清晰，有助于后期维护！

6. 装饰者模式(Decorator)

7. 组合模式（Compostite）
	处理类似树形结构的问题比较方便
8. 享元模式（Flyweight）
	实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销。
	当一个客户端请求时，判断池中是否有符合条件的对象，如果有，则返回已经存在的对象，如果没有，则创建一个新的对象，或者等待。
	JDBC连接池：通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新创建的开销，提升了系统的性能。

9. 迭代器模式（Iterator）
	顺序访问聚集中的对象。例如集合中Iterator
	一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。
	
10. 访问者模式（Visitor）
	访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。
	该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦。

11. 建造者模式（Builder）
	对于复杂对象的构建进行拆解

12. 适配器模式（Adapter）
	接口转换（电压转接头、java.io、asm.transformer、jdbc-odbc bridge）
	main(){
		FileInputStream fis = new FileInputStream("c:/test.txt");
		InputStreamReader isr = new InputStreamReader(fis);// 转换
		BufferedReader br = new BufferedReader(isr);
		String line = br.readLine();
		while(line != null && !line.equals("")){
			System.out.println(line);
		}
		br.close();
	}

13. 桥接模式（Bridge）
	桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。
	桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。

14. 命令模式（Command）
	命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开。
	doit(); undo();

15. 备忘录模式（Memento）
	主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象。
	存盘和恢复

16. 模版方法（TemplateMethod）
	一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用，
